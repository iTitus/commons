plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

group = 'io.github.ititus'
version = '1.5.1'

wrapper {
    gradleVersion '7.0'
}

java {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_11

    withSourcesJar()
    withJavadocJar()
}

javadoc {
    options {
        addStringOption('Xdoclint:all,-missing', '-quiet')
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.7.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core:3.19.0'
    testImplementation 'org.mockito:mockito-core:3.9.0'
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            pom {
                name = 'iTitus Commons'
                packaging = 'jar'
                description = 'Library for commonly needed functionality'
                url = 'https://github.com/iTitus/commons'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://mit-license.org'
                    }
                }
                developers {
                    developer {
                        id = 'iTitus'
                        name = 'iTitus'
                        email = 'ititus@users.noreply.github.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/iTitus/commons.git'
                    developerConnection = 'scm:git:ssh://git@github.com:iTitus/commons.git'
                    url = 'https://github.com/iTitus/commons'
                    tag = "v${version}"
                }
            }

            from components.java
        }
    }
}

signing {
    def signingKey = findProperty('signing_key')
    def signingPassword = findProperty('signing_password')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.MyPublication
}

nexusPublishing {
    connectTimeout = clientTimeout = Duration.ofHours(1)
    repositories {
        sonatype {
            stagingProfileId = project.findProperty('ossrh_staging_profile_id')
            username = project.findProperty('ossrh_username')
            password = project.findProperty('ossrh_password')
        }
    }
}
