plugins {
    id 'java-library'
    id 'me.champeau.jmh' version '0.7.3'
    id 'com.vanniktech.maven.publish' version '0.34.0'
}

group = 'io.github.ititus'
version = '2.3.4-SNAPSHOT'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 21
}

tasks.withType(Test).configureEach {
    systemProperty 'file.encoding', 'UTF-8'
}

javadoc {
    options {
        // silence warnings on missing javadoc
        addBooleanOption('Xdoclint:all,-missing', true)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:6.0.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.assertj:assertj-core:3.27.6'
    testImplementation 'org.mockito:mockito-core:5.20.0'
    testImplementation 'com.google.jimfs:jimfs:1.3.1'
}

test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

jmh {
    jmhVersion = '1.37'
    warmupIterations = 2
    iterations = 5
    fork = 1
}

tasks.withType(me.champeau.jmh.JmhParameters).configureEach {
    jvmArgsAppend = ['-Dfile.encoding=UTF-8']
}

mavenPublishing {
    publishToMavenCentral(true)
    signAllPublications()

    pom {
        name = 'iTitus Commons'
        description = 'Library for commonly needed functionality'
        url = 'https://github.com/iTitus/commons'
        licenses {
            license {
                name = 'MIT License'
                url = 'https://mit-license.org'
            }
        }
        developers {
            developer {
                id = 'iTitus'
                name = 'iTitus'
                email = 'ititus@users.noreply.github.com'
            }
        }
        scm {
            connection = 'scm:git:git://github.com/iTitus/commons.git'
            developerConnection = 'scm:git:ssh://git@github.com:iTitus/commons.git'
            url = 'https://github.com/iTitus/commons'
            tag = "v${version}"
        }
    }
}

tasks.register('publishSnapshotToMavenCentral') {
    if (version.endsWith('-SNAPSHOT') && tasks.findByName('publishToMavenCentral')) {
        dependsOn publishToMavenCentral
    }
}.configure {
    onlyIf('SNAPSHOT version') {
        version.endsWith('-SNAPSHOT') && tasks.findByName('publishToMavenCentral')
    }
}
