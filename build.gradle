plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.22.0'
    id 'de.marcphilipp.nexus-publish' version '0.4.0'
}

group = 'io.github.ititus'
version = '1.4.1'

wrapper {
    gradleVersion '6.8.1'
}

java {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_11

    withSourcesJar()
    withJavadocJar()
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.7.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core:3.19.0'
    testImplementation 'org.mockito:mockito-core:3.7.7'
}

test {
    useJUnitPlatform()
}

def ossrhUsername = findProperty("ossrh_username")
def ossrhPassword = findProperty("ossrh_password")

publishing {
    publications {
        MyPublication(MavenPublication) {
            pom {
                name = 'iTitus Commons'
                packaging = 'jar'
                description = 'Library for commonly needed functionality'
                url = 'https://github.com/iTitus/commons'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://mit-license.org'
                    }
                }
                developers {
                    developer {
                        id = 'iTitus'
                        name = 'iTitus'
                        email = 'ititus@users.noreply.github.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/iTitus/commons.git'
                    developerConnection = 'scm:git:ssh://git@github.com:iTitus/commons.git'
                    url = 'https://github.com/iTitus/commons'
                }
            }

            from components.java
        }
    }
}

signing {
    def signingKey = findProperty("signing_key")
    def signingPassword = findProperty("signing_password")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.MyPublication
}

nexusStaging {
    username = ossrhUsername
    password = ossrhPassword
}

nexusPublishing {
    connectTimeout = clientTimeout = java.time.Duration.ofMinutes(5)
    repositories {
        sonatype {
            username = ossrhUsername
            password = ossrhPassword
        }
    }
}
