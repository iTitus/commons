package io.github.ititus.math.number;


import io.github.ititus.converter.NumberConverter;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.converter.ConvertWith;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.math.BigInteger;
import java.util.stream.Stream;

import static io.github.ititus.math.number.BigIntegerConstants.*;
import static io.github.ititus.math.number.BigIntegerMath.factorial;
import static io.github.ititus.math.number.BigIntegerMath.pow;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.params.provider.Arguments.arguments;

public class BigIntegerMathTests {

    static Stream<Arguments> test_pow() {
        return Stream.of(
                arguments(ZERO, ZERO, ONE),
                arguments(ZERO, ONE, ZERO),
                arguments(ZERO, TWO, ZERO),
                arguments(ZERO, 21, ZERO),
                arguments(ZERO, 42, ZERO),
                arguments(ONE, ZERO, ONE),
                arguments(ONE, ONE, ONE),
                arguments(ONE, TWO, ONE),
                arguments(ONE, 21, ONE),
                arguments(ONE, 42, ONE),
                arguments(TWO, ZERO, ONE),
                arguments(TWO, ONE, TWO),
                arguments(TWO, TWO, FOUR),
                arguments(TWO, 21, 2097152),
                arguments(TWO, 42, 4398046511104L),
                arguments(21, ZERO, ONE),
                arguments(21, ONE, 21),
                arguments(21, TWO, 441),
                arguments(21, 21, "5842587018385982521381124421"),
                arguments(21, 42, "34135823067412405261341512451566463326809746506282585241"),
                arguments(42, ZERO, ONE),
                arguments(42, ONE, 42),
                arguments(42, TWO, 1764),
                arguments(42, 21, "12252793050782200016679467841748992"),
                arguments(42, 42, "150130937545296572356771972164254457814047970568738777235893533016064"),
                arguments(MINUS_ONE, ZERO, ONE),
                arguments(MINUS_ONE, ONE, MINUS_ONE),
                arguments(MINUS_ONE, TWO, ONE),
                arguments(MINUS_ONE, 21, MINUS_ONE),
                arguments(MINUS_ONE, 42, ONE),
                arguments(MINUS_TWO, ZERO, ONE),
                arguments(MINUS_TWO, ONE, MINUS_TWO),
                arguments(MINUS_TWO, TWO, FOUR),
                arguments(MINUS_TWO, 21, -2097152),
                arguments(MINUS_TWO, 42, 4398046511104L),
                arguments(-21, ZERO, ONE),
                arguments(-21, ONE, -21),
                arguments(-21, TWO, 441),
                arguments(-21, 21, "-5842587018385982521381124421"),
                arguments(-21, 42, "34135823067412405261341512451566463326809746506282585241"),
                arguments(-42, ZERO, ONE),
                arguments(-42, ONE, -42),
                arguments(-42, TWO, 1764),
                arguments(-42, 21, "-12252793050782200016679467841748992"),
                arguments(-42, 42, "150130937545296572356771972164254457814047970568738777235893533016064")
        );
    }

    static Stream<Arguments> test_factorial() {
        return Stream.of(
                arguments(ZERO, ONE),
                arguments(ONE, ONE),
                arguments(TWO, TWO),
                arguments(THREE, SIX),
                arguments(FOUR, 24),
                arguments(FIVE, 120),
                arguments(SIX, 720),
                arguments(SEVEN, 5040),
                arguments(EIGHT, 40320),
                arguments(NINE, 362880),
                arguments(TEN, 3628800),
                arguments(100,
                        "93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000"),
                arguments(200,
                        "788657867364790503552363213932185062295135977687173263294742533244359449963403342920304284011984623904177212138919638830257642790242637105061926624952829931113462857270763317237396988943922445621451664240254033291864131227428294853277524242407573903240321257405579568660226031904170324062351700858796178922222789623703897374720000000000000000000000000000000000000000000000000"),
                arguments(500,
                        "1220136825991110068701238785423046926253574342803192842192413588385845373153881997605496447502203281863013616477148203584163378722078177200480785205159329285477907571939330603772960859086270429174547882424912726344305670173270769461062802310452644218878789465754777149863494367781037644274033827365397471386477878495438489595537537990423241061271326984327745715546309977202781014561081188373709531016356324432987029563896628911658974769572087926928871281780070265174507768410719624390394322536422605234945850129918571501248706961568141625359056693423813008856249246891564126775654481886506593847951775360894005745238940335798476363944905313062323749066445048824665075946735862074637925184200459369692981022263971952597190945217823331756934581508552332820762820023402626907898342451712006207714640979456116127629145951237229913340169552363850942885592018727433795173014586357570828355780158735432768888680120399882384702151467605445407663535984174430480128938313896881639487469658817504506926365338175055478128640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
                arguments(1000,
                        "402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
        );
    }

    @ParameterizedTest
    @MethodSource
    public void test_pow(
            @ConvertWith(NumberConverter.class) BigInteger base,
            @ConvertWith(NumberConverter.class) BigInteger exponent,
            @ConvertWith(NumberConverter.class) BigInteger expected) {
        BigInteger actual = pow(base, exponent);
        assertThat(actual).isEqualTo(expected);
    }

    @ParameterizedTest
    @MethodSource
    public void test_factorial(
            @ConvertWith(NumberConverter.class) BigInteger n,
            @ConvertWith(NumberConverter.class) BigInteger expected) {
        BigInteger actual = factorial(n);
        assertThat(actual).isEqualTo(expected);
    }
}
