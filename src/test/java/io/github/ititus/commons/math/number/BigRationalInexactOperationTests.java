package io.github.ititus.commons.math.number;

import io.github.ititus.commons.assertions.Assertions;
import io.github.ititus.commons.converter.NumberConverter;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.converter.ConvertWith;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static io.github.ititus.commons.math.number.BigRational.ofExp;
import static org.assertj.core.data.Offset.strictOffset;
import static org.junit.jupiter.params.provider.Arguments.arguments;

class BigRationalInexactOperationTests {

    static Stream<Arguments> test_sqrt() {
        return Stream.of(
                arguments(0, 0, ofExp(1, -33)),
                arguments(1, 1, ofExp(1, -33)),
                arguments(2, "1.414213562373095048801688724209698078569671875376948073176679738", ofExp(1, -33)),
                arguments(5, "2.236067977499789696409173668731276235440618359611525724270897245", ofExp(1, -33)),
                arguments(10, "3.162277660168379331998893544432718533719555139325216826857504853", ofExp(1, -33)),
                arguments(20, "4.472135954999579392818347337462552470881236719223051448541794491", ofExp(1, -33)),
                arguments(50, "7.071067811865475244008443621048490392848359376884740365883398690", ofExp(1, -33)),
                arguments(100, 10, ofExp(1, -32)),
                arguments(200, "14.14213562373095048801688724209698078569671875376948073176679738", ofExp(1, -32)),
                arguments(500, "22.36067977499789696409173668731276235440618359611525724270897245", ofExp(1, -32)),
                arguments(1000, "31.62277660168379331998893544432718533719555139325216826857504853", ofExp(1, -32))
        );
    }

    static Stream<Arguments> test_pow() {
        return Stream.of(
                arguments(0, 0, 1, ofExp(1, -33))
        );
    }

    static Stream<Arguments> test_exp() {
        return Stream.of(
                arguments(0, 1, ofExp(1, -33)),
                arguments(1, "2.718281828459045235360287471352662497757247093699959574966967628", ofExp(1, -33)),
                arguments(-1, "0.3678794411714423215955237701614608674458111310317678345078368017", ofExp(1, -34)),
                arguments(2, "7.389056098930650227230427460575007813180315570551847324087127823", ofExp(1, -33)),
                arguments(-2, "0.1353352832366126918939994949724844034076315459095758814681588727", ofExp(1, -34)),
                arguments(5, "148.4131591025766034211155800405522796234876675938789890467528451", ofExp(1, -31)),
                arguments(-5, "0.006737946999085467096636048423148424248849585027355085430305531573", ofExp(1, -36)),
                arguments(10, "22026.46579480671651695790064528424436635351261855678107423542636", ofExp(1, -29)),
                arguments(-10, "0.00004539992976248485153559151556055061023791808886656496925907130565", ofExp(1, -38)),
                arguments(20, "485165195.4097902779691068305415405586846389889448472543536108003", ofExp(1, -25)),
                arguments(-20, "0.000000002061153622438557827965940380155820976375807275599103692972244662", ofExp(1,
                        -42))
        );
    }

    static Stream<Arguments> test_ln() {
        return Stream.of(
                arguments(1, 0, ofExp(1, -32)),
                arguments(2, "0.6931471805599453094172321214581765680755001343602552541206800095", ofExp(1, -33)),
                arguments(5, "1.609437912434100374600759333226187639525601354268517721912647891", ofExp(1, -32)),
                arguments(10, "2.302585092994045684017991454684364207601101488628772976033327901", ofExp(1, -32)),
                arguments(20, "2.995732273553990993435223576142540775676601622989028230154007910", ofExp(1, -32)),
                arguments(50, "3.912023005428146058618750787910551847126702842897290697945975792", ofExp(1, -32)),
                arguments(100, "4.605170185988091368035982909368728415202202977257545952066655802", ofExp(1, -32)),
                arguments(200, "5.298317366548036677453215030826904983277703111617801206187335811", ofExp(1, -32)),
                arguments(500, "6.214608098422191742636742242594916054727804331526063673979303693", ofExp(1, -32)),
                arguments(1000, "6.907755278982137052053974364053092622803304465886318928099983703", ofExp(1, -32))
        );
    }

    static Stream<Arguments> test_sin() {
        return Stream.of(
                arguments(0, 0, ofExp(1, -31)),
                arguments(1, "0.8414709848078965066525023216302989996225630607983710656727517100", ofExp(1, -32)),
                arguments(-1, "-0.8414709848078965066525023216302989996225630607983710656727517100", ofExp(1, -32)),
                arguments(2, "0.9092974268256816953960198659117448427022549714478902683789730115", ofExp(1, -32)),
                arguments(-2, "-0.9092974268256816953960198659117448427022549714478902683789730115", ofExp(1, -32)),
                arguments(5, "-0.9589242746631384688931544061559939733524615439646017781316724542", ofExp(1, -32)),
                arguments(-5, "0.9589242746631384688931544061559939733524615439646017781316724542", ofExp(1, -32)),
                arguments(10, "-0.5440211108893698134047476618513772816836430129162238915741840126", ofExp(1, -32)),
                arguments(-10, "0.5440211108893698134047476618513772816836430129162238915741840126", ofExp(1, -32)),
                arguments(20, "0.9129452507276276543760999838456823012979325837081899563051281148", ofExp(1, -32)),
                arguments(-20, "-0.9129452507276276543760999838456823012979325837081899563051281148", ofExp(1, -32)),
                arguments(50, "-0.2623748537039287859143936469126225458866659649712385229439355924", ofExp(1, -32)),
                arguments(-50, "0.2623748537039287859143936469126225458866659649712385229439355924", ofExp(1, -32)),
                arguments(100, "-0.5063656411097587936565576104597854320650327212906573234433924736", ofExp(1, -32)),
                arguments(-100, "0.5063656411097587936565576104597854320650327212906573234433924736", ofExp(1, -32)),
                arguments(200, "-0.8732972972139945817330184211508095694341557297375498262160276429", ofExp(1, -32)),
                arguments(-200, "0.8732972972139945817330184211508095694341557297375498262160276429", ofExp(1, -32)),
                arguments(500, "-0.4677718053224761263207008967230264914740956523021641361167254220", ofExp(1, -32)),
                arguments(-500, "0.4677718053224761263207008967230264914740956523021641361167254220", ofExp(1, -32)),
                arguments(1000, "0.8268795405320025602558874291092181412127249678477883209081232758", ofExp(1, -32)),
                arguments(-1000, "-0.8268795405320025602558874291092181412127249678477883209081232758", ofExp(1, -32))
        );
    }

    static Stream<Arguments> test_cos() {
        return Stream.of(
                arguments(0, 1, ofExp(1, -32)),
                arguments(1, "0.5403023058681397174009366074429766037323104206179222276700972554", ofExp(1, -33)),
                arguments(-1, "0.5403023058681397174009366074429766037323104206179222276700972554", ofExp(1, -33)),
                arguments(2, "-0.4161468365471423869975682295007621897660007710755448907551499738", ofExp(1, -33)),
                arguments(-2, "-0.4161468365471423869975682295007621897660007710755448907551499738", ofExp(1, -33)),
                arguments(5, "0.2836621854632262644666391715135573083344225922522159449303590666", ofExp(1, -33)),
                arguments(-5, "0.2836621854632262644666391715135573083344225922522159449303590666", ofExp(1, -33)),
                arguments(10, "-0.8390715290764524522588639478240648345199301651331685468359537310", ofExp(1, -33)),
                arguments(-10, "-0.8390715290764524522588639478240648345199301651331685468359537310", ofExp(1, -33)),
                arguments(20, "0.4080820618133919860622678609276449570992995103162528227552793987", ofExp(1, -33)),
                arguments(-20, "0.4080820618133919860622678609276449570992995103162528227552793987", ofExp(1, -33)),
                arguments(50, "0.9649660284921132740689570589010169919204172753780617560878789966", ofExp(1, -33)),
                arguments(-50, "0.9649660284921132740689570589010169919204172753780617560878789966", ofExp(1, -33)),
                arguments(100, "0.8623188722876839341019385139508425355100840085355108292801621127", ofExp(1, -33)),
                arguments(-100, "0.8623188722876839341019385139508425355100840085355108292801621127", ofExp(1, -33)),
                arguments(200, "0.4871876750070059103547479013345241975814543216356351744549508923", ofExp(1, -33)),
                arguments(-200, "0.4871876750070059103547479013345241975814543216356351744549508923", ofExp(1, -33)),
                arguments(500, "-0.8838492734314779621666054034686361169052400550655982602342103704", ofExp(1, -33)),
                arguments(-500, "-0.8838492734314779621666054034686361169052400550655982602342103704", ofExp(1, -33)),
                arguments(1000, "0.5623790762907029910782492266053959687558118217381969177028251858", ofExp(1, -33)),
                arguments(-1000, "0.5623790762907029910782492266053959687558118217381969177028251858", ofExp(1, -33))
        );
    }

    static Stream<Arguments> test_tan() {
        return Stream.of(
                arguments(0, 0, ofExp(1, -32)),
                arguments(1, "1.557407724654902230506974807458360173087250772381520038383946606", ofExp(1, -32)),
                arguments(-1, "-1.557407724654902230506974807458360173087250772381520038383946606", ofExp(1, -32)),
                arguments(2, "-2.185039863261518991643306102313682543432017746227663164562955870", ofExp(1, -32)),
                arguments(-2, "2.185039863261518991643306102313682543432017746227663164562955870", ofExp(1, -32)),
                arguments(5, "-3.380515006246585636982705879447343908709569208285459877176820981", ofExp(1, -32)),
                arguments(-5, "3.380515006246585636982705879447343908709569208285459877176820981", ofExp(1, -32)),
                arguments(10, "0.6483608274590866712591249330098086768168743429837249756336279674", ofExp(1, -33)),
                arguments(-10, "-0.6483608274590866712591249330098086768168743429837249756336279674", ofExp(1, -33)),
                arguments(20, "2.237160944224742265287173247730349178372483974918816995908347878", ofExp(1, -32)),
                arguments(-20, "-2.237160944224742265287173247730349178372483974918816995908347878", ofExp(1, -32)),
                arguments(50, "-0.2719006119976307451135330892446703677679460772254629452167846147", ofExp(1, -33)),
                arguments(-50, "0.2719006119976307451135330892446703677679460772254629452167846147", ofExp(1, -33)),
                arguments(100, "-0.5872139151569290766778096356445878942587659868729195441266396836", ofExp(1, -33)),
                arguments(-100, "0.5872139151569290766778096356445878942587659868729195441266396836", ofExp(1, -33)),
                arguments(200, "-1.792527483790381796651898438232729888206235979818795109726015223", ofExp(1, -32)),
                arguments(-200, "1.792527483790381796651898438232729888206235979818795109726015223", ofExp(1, -32)),
                arguments(500, "0.5292438647444800942564944410884999132312961435258630278864687806", ofExp(1, -33)),
                arguments(-500, "-0.5292438647444800942564944410884999132312961435258630278864687806", ofExp(1, -33)),
                arguments(1000, "1.470324155702718445980208804903918569157483891467111820254556654", ofExp(1, -32)),
                arguments(-1000, "-1.470324155702718445980208804903918569157483891467111820254556654", ofExp(1, -32))
        );
    }

    static Stream<Arguments> test_sec() {
        return Stream.of(
                arguments(0, 1, ofExp(1, -32)),
                arguments(1, "1.850815717680925617911753241398650193470396655094009298835158278", ofExp(1, -32)),
                arguments(-1, "1.850815717680925617911753241398650193470396655094009298835158278", ofExp(1, -32)),
                arguments(2, "-2.402997961722380989754600401420066226245121093154526013044400970", ofExp(1, -32)),
                arguments(-2, "-2.402997961722380989754600401420066226245121093154526013044400970", ofExp(1, -32)),
                arguments(5, "3.525320085816088406701801059963244258542819400176246001736148496", ofExp(1, -32)),
                arguments(-5, "3.525320085816088406701801059963244258542819400176246001736148496", ofExp(1, -32)),
                arguments(10, "-1.191793506687895810879693898427346590204729922003518672770613645", ofExp(1, -32)),
                arguments(-10, "-1.191793506687895810879693898427346590204729922003518672770613645", ofExp(1, -32)),
                arguments(20, "2.450487520956705539938502821598808956713179472092883507052386735", ofExp(1, -32)),
                arguments(-20, "2.450487520956705539938502821598808956713179472092883507052386735", ofExp(1, -32)),
                arguments(50, "1.036305911787000344859273596990924844401765973715398672898852633", ofExp(1, -32)),
                arguments(-50, "1.036305911787000344859273596990924844401765973715398672898852633", ofExp(1, -32)),
                arguments(100, "1.159663822904693832551404446586920101477501548213513634328582818", ofExp(1, -32)),
                arguments(-100, "1.159663822904693832551404446586920101477501548213513634328582818", ofExp(1, -32)),
                arguments(200, "2.052597081782948817107517167803697932625475517012273169608822776", ofExp(1, -32)),
                arguments(-200, "2.052597081782948817107517167803697932625475517012273169608822776", ofExp(1, -32)),
                arguments(500, "-1.131414631498847791025332843837733975705156000311070981337959827", ofExp(1, -32)),
                arguments(-500, "-1.131414631498847791025332843837733975705156000311070981337959827", ofExp(1, -32)),
                arguments(1000, "1.778160038591271411679801412688941075680406654329331671718539118", ofExp(1, -32)),
                arguments(-1000, "1.778160038591271411679801412688941075680406654329331671718539118", ofExp(1, -32))
        );
    }

    static Stream<Arguments> test_csc() {
        return Stream.of(
                arguments(1, "1.188395105778121216261599452374551003527829834097962625265253666", ofExp(1, -32)),
                arguments(-1, "-1.188395105778121216261599452374551003527829834097962625265253666", ofExp(1, -32)),
                arguments(2, "1.099750170294616466756697397026312896658764443149845708742554443", ofExp(1, -32)),
                arguments(-2, "-1.099750170294616466756697397026312896658764443149845708742554443", ofExp(1, -32)),
                arguments(5, "-1.042835212771405819783119855907759843972351752364546174404470858", ofExp(1, -32)),
                arguments(-5, "1.042835212771405819783119855907759843972351752364546174404470858", ofExp(1, -32)),
                arguments(10, "-1.838163960889665588705236523764914597388902001883497386257349375", ofExp(1, -32)),
                arguments(-10, "1.838163960889665588705236523764914597388902001883497386257349375", ofExp(1, -32)),
                arguments(20, "1.095355936408003359768297144346118994068770774692843733276549787", ofExp(1, -32)),
                arguments(-20, "-1.095355936408003359768297144346118994068770774692843733276549787", ofExp(1, -32)),
                arguments(50, "-3.811340857872105057309610136147206249360830090771230246490875908", ofExp(1, -32)),
                arguments(-50, "3.811340857872105057309610136147206249360830090771230246490875908", ofExp(1, -32)),
                arguments(100, "-1.974857531424099961212264548801954230617865040827240343721264088", ofExp(1, -32)),
                arguments(-100, "1.974857531424099961212264548801954230617865040827240343721264088", ofExp(1, -32)),
                arguments(200, "-1.145085417291699146388270547600935878554342475237348471315559578", ofExp(1, -32)),
                arguments(-200, "1.145085417291699146388270547600935878554342475237348471315559578", ofExp(1, -32)),
                arguments(500, "-2.137794515662636626248719714175648714441667134608977599202248250", ofExp(1, -32)),
                arguments(-500, "2.137794515662636626248719714175648714441667134608977599202248250", ofExp(1, -32)),
                arguments(1000, "1.209365997079349905389328863249389609447932202414706543487062729", ofExp(1, -32)),
                arguments(-1000, "-1.209365997079349905389328863249389609447932202414706543487062729", ofExp(1, -32))
        );
    }

    static Stream<Arguments> test_asin() {
        return Stream.of(
                arguments(0, 0, ofExp(1, -33)),
                arguments(1, "1.570796326794896619231321691639751442098584699687552910487472296", ofExp(1, -33)),
                arguments(-1, "-1.570796326794896619231321691639751442098584699687552910487472296", ofExp(1, -33))
        );
    }

    static Stream<Arguments> test_acos() {
        return Stream.of(
                arguments(0, "1.570796326794896619231321691639751442098584699687552910487472296", ofExp(1, -33)),
                arguments(1, 0, ofExp(1, -33)),
                arguments(-1, "3.141592653589793238462643383279502884197169399375105820974944592", ofExp(1, -33))
        );
    }

    static Stream<Arguments> test_atan() {
        return Stream.of(
                arguments(0, 0, ofExp(1, -33)),
                arguments(1, "0.7853981633974483096156608458198757210492923498437764552437361481", ofExp(1, -34)),
                arguments(-1, "-0.7853981633974483096156608458198757210492923498437764552437361481", ofExp(1, -34)),
                arguments(2, "1.107148717794090503017065460178537040070047645401432646676539207", ofExp(1, -33)),
                arguments(-2, "-1.107148717794090503017065460178537040070047645401432646676539207", ofExp(1, -33)),
                arguments(5, "1.373400766945015860861271926444961148650999595899700808969783356", ofExp(1, -33)),
                arguments(-5, "-1.373400766945015860861271926444961148650999595899700808969783356", ofExp(1, -33)),
                arguments(10, "1.471127674303734591852875571761730851855306377183238262471963519", ofExp(1, -33)),
                arguments(-10, "-1.471127674303734591852875571761730851855306377183238262471963519", ofExp(1, -33)),
                arguments(20, "1.520837931072953857821315404604906560607307619264045736076618841", ofExp(1, -33)),
                arguments(-20, "-1.520837931072953857821315404604906560607307619264045736076618841", ofExp(1, -33)),
                arguments(50, "1.550798992821746086170568494738154954149351501001044426581577853", ofExp(1, -33)),
                arguments(-50, "-1.550798992821746086170568494738154954149351501001044426581577853", ofExp(1, -33)),
                arguments(100, "1.560796660108231381024981575430471893537215347143176270859532878", ofExp(1, -33)),
                arguments(-100, "-1.560796660108231381024981575430471893537215347143176270859532878", ofExp(1, -33)),
                arguments(200, "1.565796368460938297058485634570641490501607023795364507163930054", ofExp(1, -33)),
                arguments(-200, "-1.565796368460938297058485634570641490501607023795364507163930054", ofExp(1, -33)),
                arguments(500, "1.568796329461556885916274015703429686778678348304640245231843669", ofExp(1, -33)),
                arguments(-500, "-1.568796329461556885916274015703429686778678348304640245231843669", ofExp(1, -33)),
                arguments(1000, "1.569796327128229752564797882004830898086963765133284897396041248", ofExp(1, -33)),
                arguments(-1000, "-1.569796327128229752564797882004830898086963765133284897396041248", ofExp(1, -33))
        );
    }

    static Stream<Arguments> test_asec() {
        return Stream.of(
                arguments(1, 0, ofExp(1, -32)),
                arguments(-1, "3.141592653589793238462643383279502884197169399375105820974944592", ofExp(1, -32)),
                arguments(2, "1.047197551196597746154214461093167628065723133125035273658314864", ofExp(1, -32)),
                arguments(-2, "2.094395102393195492308428922186335256131446266250070547316629728", ofExp(1, -32)),
                arguments(5, "1.369438406004565827776196139422128031858546618285324524230221053", ofExp(1, -32)),
                arguments(-5, "1.772154247585227410686447243857374852338622781089781296744723540", ofExp(1, -32)),
                arguments(10, "1.470628905633336822885798512187058123529908727457923369096448441", ofExp(1, -32)),
                arguments(-10, "1.670963747956456415576844871092444760667260671917182451878496151", ofExp(1, -32)),
                arguments(20, "1.520775469989126604568577304819287327120778619192865017758728316", ofExp(1, -32)),
                arguments(-20, "1.620817183600666633894066078460215557076390780182240803216216277", ofExp(1, -32)),
                arguments(50, "1.550794993221506127480706705429974227111577477282323987195439927", ofExp(1, -32)),
                arguments(-50, "1.590797660368287110981936677849528657085591922092781833779504665", ofExp(1, -32)),
                arguments(100, "1.560796160120729506105699414567761058420014306044543712101142782", ofExp(1, -32)),
                arguments(-100, "1.580796493469063732356943968711741825777155093330562108873801810", ofExp(1, -32)),
                arguments(200, "1.565796305961328907410205803193049003884673979490486600545602309", ofExp(1, -32)),
                arguments(-200, "1.575796347628464331052437580086453880312495419884619220429342283", ofExp(1, -32)),
                arguments(500, "1.568796325461560885892274057036531020600009039510836212519925937", ofExp(1, -32)),
                arguments(-500, "1.572796328128232352570369326242971863597160359864269608455018655", ofExp(1, -32)),
                arguments(1000, "1.569796326628229877564610382085559951472440002031820100917707370", ofExp(1, -32)),
                arguments(-1000, "1.571796326961563360898033001193942932724729397343285720057237222", ofExp(1, -32))
        );
    }

    static Stream<Arguments> test_acsc() {
        return Stream.of(
                arguments(1, "1.570796326794896619231321691639751442098584699687552910487472296", ofExp(1, -29)),
                arguments(-1, "-1.570796326794896619231321691639751442098584699687552910487472296", ofExp(1, -29)),
                arguments(2, "0.5235987755982988730771072305465838140328615665625176368291574321", ofExp(1, -30)),
                arguments(-2, "-0.5235987755982988730771072305465838140328615665625176368291574321", ofExp(1, -30)),
                arguments(5, "0.2013579207903307914551255522176234102400380814022283862572512435", ofExp(1, -30)),
                arguments(-5, "-0.2013579207903307914551255522176234102400380814022283862572512435", ofExp(1, -30)),
                arguments(10, "0.1001674211615597963455231794526933185686759722296295413910238550", ofExp(1, -30)),
                arguments(-10, "-0.1001674211615597963455231794526933185686759722296295413910238550", ofExp(1, -30)),
                arguments(20, "0.05002085680577001466274438682046411497780608049468789272874398056", ofExp(1, -31)),
                arguments(-20, "-0.05002085680577001466274438682046411497780608049468789272874398056", ofExp(1, -31)),
                arguments(50, "0.02000133357339049175061498620977721498700722240522892329203236869", ofExp(1, -31)),
                arguments(-50, "-0.02000133357339049175061498620977721498700722240522892329203236869", ofExp(1, -31)),
                arguments(100, "0.01000016667416711312562227707199038367857039364300919838632951405", ofExp(1, -31)),
                arguments(-100, "-0.01000016667416711312562227707199038367857039364300919838632951405", ofExp(1, -31)),
                arguments(200, "0.005000020833567711821115888446702438213910720197066309941869987136", ofExp(1, -32)),
                arguments(-200, "-0.005000020833567711821115888446702438213910720197066309941869987136", ofExp(1, -32)),
                arguments(500, "0.002000001333335733339047634603220421498575660176716697967546358818", ofExp(1, -32)),
                arguments(-500, "-0.002000001333335733339047634603220421498575660176716697967546358818", ofExp(1, -32)),
                arguments(1000, "0.001000000166666741666711309554191490626144697655732809569764925712", ofExp(1, -32)),
                arguments(-1000, "-0.001000000166666741666711309554191490626144697655732809569764925712", ofExp(1, -32))
        );
    }

    static Stream<Arguments> test_sinh() {
        return Stream.of(
                arguments(0, 0, ofExp(1, -33)),
                arguments(1, "1.175201193643801456882381850595600815155717981334095870229565413", ofExp(1, -33)),
                arguments(-1, "-1.175201193643801456882381850595600815155717981334095870229565413", ofExp(1, -33)),
                arguments(2, "3.626860407847018767668213982801261704886342012321135721309484475", ofExp(1, -33)),
                arguments(-2, "-3.626860407847018767668213982801261704886342012321135721309484475", ofExp(1, -33)),
                arguments(5, "74.20321057778875897700947199606456559961940900442581698066126979", ofExp(1, -32)),
                arguments(-5, "-74.20321057778875897700947199606456559961940900442581698066126979", ofExp(1, -32)),
                arguments(10, "11013.23287470339337723652455484636440290145119031934610383522855", ofExp(1, -29)),
                arguments(-10, "-11013.23287470339337723652455484636440290145119031934610383522855", ofExp(1, -29)),
                arguments(20, "242582597.7048951379539766040514913653593493043945131389889017624", ofExp(1, -25)),
                arguments(-20, "-242582597.7048951379539766040514913653593493043945131389889017624", ofExp(1, -25)),
                arguments(50, "2592352764293536232043.726661466742692413734453854430802756139316", ofExp(1, -12)),
                arguments(-50, "-2592352764293536232043.726661466742692413734453854430802756139316", ofExp(1, -12)),
                arguments(100, "13440585709080677242063127757900067936805559.38687096120759580431", ofExp(1, 10)),
                arguments(-100, "-13440585709080677242063127757900067936805559.38687096120759580431", ofExp(1, 10))
        );
    }

    static Stream<Arguments> test_cosh() {
        return Stream.of(
                arguments(0, 1, ofExp(1, -33)),
                arguments(1, "1.543080634815243778477905620757061682601529112365863704737402215", ofExp(1, -33)),
                arguments(-1, "1.543080634815243778477905620757061682601529112365863704737402215", ofExp(1, -33)),
                arguments(2, "3.762195691083631459562213477773746108293973558230711602777643348", ofExp(1, -33)),
                arguments(-2, "3.762195691083631459562213477773746108293973558230711602777643348", ofExp(1, -33)),
                arguments(5, "74.20994852478784444410610804448771402386825858945317206609157532", ofExp(1, -32)),
                arguments(-5, "74.20994852478784444410610804448771402386825858945317206609157532", ofExp(1, -32)),
                arguments(10, "11013.23292010332313972137609043787996345206142823743497040019781", ofExp(1, -29)),
                arguments(-10, "11013.23292010332313972137609043787996345206142823743497040019781", ofExp(1, -29)),
                arguments(20, "242582597.7048951400151302264900491933252896845503341153647090380", ofExp(1, -25)),
                arguments(-20, "242582597.7048951400151302264900491933252896845503341153647090380", ofExp(1, -25)),
                arguments(50, "2592352764293536232043.726661466742692413734646729415599147917618", ofExp(1, -12)),
                arguments(-50, "2592352764293536232043.726661466742692413734646729415599147917618", ofExp(1, -12)),
                arguments(100, "13440585709080677242063127757900067936805559.38687096120759580431", ofExp(1, 10)),
                arguments(-100, "13440585709080677242063127757900067936805559.38687096120759580431", ofExp(1, 10))
        );
    }

    static Stream<Arguments> test_tanh() {
        return Stream.of(
                arguments(0, 0, ofExp(1, -32)),
                arguments(1, "0.7615941559557648881194582826047935904127685972579365515968105001", ofExp(1, -33)),
                arguments(-1, "-0.7615941559557648881194582826047935904127685972579365515968105001", ofExp(1, -33)),
                arguments(2, "0.9640275800758168839464137241009231502550299762409347760482632174", ofExp(1, -33)),
                arguments(-2, "-0.9640275800758168839464137241009231502550299762409347760482632174", ofExp(1, -33)),
                arguments(5, "0.9999092042625951312109904475344730210898126159905478627364288723", ofExp(1, -33)),
                arguments(-5, "-0.9999092042625951312109904475344730210898126159905478627364288723", ofExp(1, -33)),
                arguments(10, "0.9999999958776927636195928371382757410508146184950199622614006954", ofExp(1, -33)),
                arguments(-10, "-0.9999999958776927636195928371382757410508146184950199622614006954", ofExp(1, -33)),
                arguments(20, "0.9999999999999999915032914894168220454385581911909872571304745642", ofExp(1, -33)),
                arguments(-20, "-0.9999999999999999915032914894168220454385581911909872571304745642", ofExp(1, -33)),
                arguments(50, "0.9999999999999999999999999999999999999999999255984804795832807408", ofExp(1, -33)),
                arguments(-50, "-0.9999999999999999999999999999999999999999999255984804795832807408", ofExp(1, -33)),
                arguments(100, 1, ofExp(1, -32)),
                arguments(-100, -1, ofExp(1, -32))
        );
    }

    static Stream<Arguments> test_sech() {
        return Stream.of(
                arguments(0, 1, ofExp(1, -32)),
                arguments(1, "0.6480542736638853995749773532261503231084893120719420230378653373", ofExp(1, -33)),
                arguments(-1, "0.6480542736638853995749773532261503231084893120719420230378653373", ofExp(1, -33)),
                arguments(2, "0.2658022288340796921208627398198889715307826544322680697146411475", ofExp(1, -33)),
                arguments(-2, "0.2658022288340796921208627398198889715307826544322680697146411475", ofExp(1, -33)),
                arguments(5, "0.01347528222130455730551913824488215529083735394170068683328190350", ofExp(1, -34)),
                arguments(-5, "0.01347528222130455730551913824488215529083735394170068683328190350", ofExp(1, -34)),
                arguments(10, "0.00009079985933781724408012950782047818706880376600182538151639708056", ofExp(1, -37)),
                arguments(-10, "0.00009079985933781724408012950782047818706880376600182538151639708056", ofExp(1, -37)),
                arguments(20, "0.000000004122307244877115638418859234918601350175668470136594255940178382", ofExp(1,
                        -41)),
                arguments(-20, "0.000000004122307244877115638418859234918601350175668470136594255940178382", ofExp(1,
                        -41))
        );
    }

    static Stream<Arguments> test_csch() {
        return Stream.of(
                arguments(1, "0.8509181282393215451338427632871752841817246609103396169904211517", ofExp(1, -33)),
                arguments(-1, "-0.8509181282393215451338427632871752841817246609103396169904211517", ofExp(1, -33)),
                arguments(2, "0.2757205647717832077583514821630271212496226719912580519731712337", ofExp(1, -33)),
                arguments(-2, "-0.2757205647717832077583514821630271212496226719912580519731712337", ofExp(1, -33)),
                arguments(5, "0.01347650583058908665538188128433796461803545533648381469783314208", ofExp(1, -34)),
                arguments(-5, "-0.01347650583058908665538188128433796461803545533648381469783314208", ofExp(1, -34)),
                arguments(10, "0.00009079985971212216283373649360729137036741076567144571148989184751", ofExp(1, -37)),
                arguments(-10, "-0.00009079985971212216283373649360729137036741076567144571148989184751", ofExp(1,
                        -37)),
                arguments(20, "0.000000004122307244877115673444902285704682704130599673093259034336632419", ofExp(1,
                        -41)),
                arguments(-20, "-0.000000004122307244877115673444902285704682704130599673093259034336632419", ofExp(1
                        , -41))
        );
    }

    static Stream<Arguments> test_asinh() {
        return Stream.of(
                arguments(0, 0, ofExp(1, -27)),
                arguments(1, "0.8813735870195430252326093249797923090281603282616354107532956087", ofExp(1, -28)),
                arguments(-1, "-0.8813735870195430252326093249797923090281603282616354107532956087", ofExp(1, -28)),
                arguments(2, "1.443635475178810342493276740273105269405553003156981558983054507", ofExp(1, -27)),
                arguments(-2, "-1.443635475178810342493276740273105269405553003156981558983054507", ofExp(1, -27)),
                arguments(5, "2.312438341272752620253562341364414383658245072646559237167228990", ofExp(1, -27)),
                arguments(-5, "-2.312438341272752620253562341364414383658245072646559237167228990", ofExp(1, -27)),
                arguments(10, "2.998222950297969738846595537596453476607058054877303655734459263", ofExp(1, -27)),
                arguments(-10, "-2.998222950297969738846595537596453476607058054877303655734459263", ofExp(1, -27)),
                arguments(20, "3.689503868988905640821653570961093329678760832868086366520509251", ofExp(1, -27)),
                arguments(-20, "-3.689503868988905640821653570961093329678760832868086366520509251", ofExp(1, -27)),
                arguments(50, "4.605270170991423826621239267208306413008902245692188338724928101", ofExp(1, -27)),
                arguments(-50, "-4.605270170991423826621239267208306413008902245692188338724928101", ofExp(1, -27)),
                arguments(100, "5.298342365610588757368825689112906302142383535156218238322615244", ofExp(1, -27)),
                arguments(-100, "-5.298342365610588757368825689112906302142383535156218238322615244", ofExp(1, -27)),
                arguments(200, "5.991470797049389050659179285510065652734789454154063468456266769", ofExp(1, -27)),
                arguments(-200, "-5.991470797049389050659179285510065652734789454154063468456266769", ofExp(1, -27)),
                arguments(500, "6.907756278980637055387298947411625879136882941272422819678047522", ofExp(1, -27)),
                arguments(-500, "-6.907756278980637055387298947411625879136882941272422819678047522", ofExp(1, -27)),
                arguments(1000, "7.600902709541988611523289784664939633568339120417227831061563095", ofExp(1, -27)),
                arguments(-1000, "-7.600902709541988611523289784664939633568339120417227831061563095", ofExp(1, -27))
        );
    }

    static Stream<Arguments> test_acosh() {
        return Stream.of(
                arguments(1, 0, ofExp(1, -32)),
                arguments(2, "1.316957896924816708625046347307968444026981971467516479768472257", ofExp(1, -32)),
                arguments(5, "2.292431669561177687800787311348015431621868240015710247605016445", ofExp(1, -32)),
                arguments(10, "2.993222846126380897912667713774182913083660451180980642685145601", ofExp(1, -32)),
                arguments(20, "3.688253867361296667618167572032351887833155697655874258829256851", ofExp(1, -32)),
                arguments(50, "4.605070170984757159450572551513062915547943483476541577357007702", ofExp(1, -32)),
                arguments(100, "5.298292365610484590701666834943247168937251883140100722832549862", ofExp(1, -32)),
                arguments(200, "5.991458297049387423055012138191543334672461218570587478472727394", ofExp(1, -32)),
                arguments(500, "6.907754278980637048720632280694559212469725988891465036503444284", ofExp(1, -32)),
                arguments(1000, "7.600902209541988611419123117998223748151672423825895985802860015", ofExp(1, -32))
        );
    }

    static Stream<Arguments> test_atanh() {
        return Stream.of(
                arguments(0, 0, ofExp(1, -33))
        );
    }

    static Stream<Arguments> test_asech() {
        return Stream.of(
                arguments(1, 0, ofExp(1, -33))
        );
    }

    static Stream<Arguments> test_acsch() {
        return Stream.of(
                arguments(1, "0.8813735870195430252326093249797923090281603282616354107532956087", ofExp(1, -30)),
                arguments(-1, "-0.8813735870195430252326093249797923090281603282616354107532956087", ofExp(1, -30)),
                arguments(2, "0.4812118250596034474977589134243684231351843343856605196610181688", ofExp(1, -30)),
                arguments(-2, "-0.4812118250596034474977589134243684231351843343856605196610181688", ofExp(1, -30)),
                arguments(5, "0.1986901103492414064746369159502069682213087942244537730212632223", ofExp(1, -30)),
                arguments(-5, "-0.1986901103492414064746369159502069682213087942244537730212632223", ofExp(1, -30)),
                arguments(10, "0.09983407889920756332730312470476944326771291170882501074238269565", ofExp(1, -31)),
                arguments(-10, "-0.09983407889920756332730312470476944326771291170882501074238269565", ofExp(1, -31)),
                arguments(20, "0.04997919006934866523139496213635678657963845106730083956449663767", ofExp(1, -31)),
                arguments(-20, "-0.04997919006934866523139496213635678657963845106730083956449663767", ofExp(1, -31)),
                arguments(50, "0.01999866690660953936049896797855979661178419986295681863486640648", ofExp(1, -31)),
                arguments(-50, "-0.01999866690660953936049896797855979661178419986295681863486640648", ofExp(1, -31)),
                arguments(100, "0.009999833340832886935141612163953795982217152792954153612524292511", ofExp(1, -32)),
                arguments(-100, "-0.009999833340832886935141612163953795982217152792954153612524292511", ofExp(1, -32)),
                arguments(200, "0.004999979166901038179002791023826038044735295207600191472040814174", ofExp(1, -32)),
                arguments(-200, "-0.004999979166901038179002791023826038044735295207600191472040814174", ofExp(1, -32)),
                arguments(500, "0.001999998666669066660952396507890689896843143245114956130025283279", ofExp(1, -32)),
                arguments(-500, "-0.001999998666669066660952396507890689896843143245114956130025283279", ofExp(1, -32)),
                arguments(1000, "0.0009999998333334083332886905065723982627788967620022562688796016270", ofExp(1, -33)),
                arguments(-1000, "-0.0009999998333334083332886905065723982627788967620022562688796016270", ofExp(1,
                        -33))
        );
    }

    @ParameterizedTest
    @MethodSource
    void test_sqrt(@ConvertWith(NumberConverter.class) BigRational r,
                   @ConvertWith(NumberConverter.class) BigRational expected,
                   @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.sqrt();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_pow(@ConvertWith(NumberConverter.class) BigRational r,
                  @ConvertWith(NumberConverter.class) BigRational q,
                  @ConvertWith(NumberConverter.class) BigRational expected,
                  @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.pow(q);
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_exp(@ConvertWith(NumberConverter.class) BigRational r,
                  @ConvertWith(NumberConverter.class) BigRational expected,
                  @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.exp();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_ln(@ConvertWith(NumberConverter.class) BigRational r,
                 @ConvertWith(NumberConverter.class) BigRational expected,
                 @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.ln();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_sin(@ConvertWith(NumberConverter.class) BigRational r,
                  @ConvertWith(NumberConverter.class) BigRational expected,
                  @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.sin();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_cos(@ConvertWith(NumberConverter.class) BigRational r,
                  @ConvertWith(NumberConverter.class) BigRational expected,
                  @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.cos();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_tan(@ConvertWith(NumberConverter.class) BigRational r,
                  @ConvertWith(NumberConverter.class) BigRational expected,
                  @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.tan();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_sec(@ConvertWith(NumberConverter.class) BigRational r,
                  @ConvertWith(NumberConverter.class) BigRational expected,
                  @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.sec();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_csc(@ConvertWith(NumberConverter.class) BigRational r,
                  @ConvertWith(NumberConverter.class) BigRational expected,
                  @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.csc();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_asin(@ConvertWith(NumberConverter.class) BigRational r,
                   @ConvertWith(NumberConverter.class) BigRational expected,
                   @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.asin();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_acos(@ConvertWith(NumberConverter.class) BigRational r,
                   @ConvertWith(NumberConverter.class) BigRational expected,
                   @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.acos();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_atan(@ConvertWith(NumberConverter.class) BigRational r,
                   @ConvertWith(NumberConverter.class) BigRational expected,
                   @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.atan();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_asec(@ConvertWith(NumberConverter.class) BigRational r,
                   @ConvertWith(NumberConverter.class) BigRational expected,
                   @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.asec();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_acsc(@ConvertWith(NumberConverter.class) BigRational r,
                   @ConvertWith(NumberConverter.class) BigRational expected,
                   @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.acsc();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_sinh(@ConvertWith(NumberConverter.class) BigRational r,
                   @ConvertWith(NumberConverter.class) BigRational expected,
                   @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.sinh();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_cosh(@ConvertWith(NumberConverter.class) BigRational r,
                   @ConvertWith(NumberConverter.class) BigRational expected,
                   @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.cosh();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_tanh(@ConvertWith(NumberConverter.class) BigRational r,
                   @ConvertWith(NumberConverter.class) BigRational expected,
                   @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.tanh();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_sech(@ConvertWith(NumberConverter.class) BigRational r,
                   @ConvertWith(NumberConverter.class) BigRational expected,
                   @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.sech();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_csch(@ConvertWith(NumberConverter.class) BigRational r,
                   @ConvertWith(NumberConverter.class) BigRational expected,
                   @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.csch();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_asinh(@ConvertWith(NumberConverter.class) BigRational r,
                    @ConvertWith(NumberConverter.class) BigRational expected,
                    @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.asinh();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_acosh(@ConvertWith(NumberConverter.class) BigRational r,
                    @ConvertWith(NumberConverter.class) BigRational expected,
                    @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.acosh();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_atanh(@ConvertWith(NumberConverter.class) BigRational r,
                    @ConvertWith(NumberConverter.class) BigRational expected,
                    @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.atanh();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_asech(@ConvertWith(NumberConverter.class) BigRational r,
                    @ConvertWith(NumberConverter.class) BigRational expected,
                    @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.asech();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }

    @ParameterizedTest
    @MethodSource
    void test_acsch(@ConvertWith(NumberConverter.class) BigRational r,
                    @ConvertWith(NumberConverter.class) BigRational expected,
                    @ConvertWith(NumberConverter.class) BigRational eps) {
        BigRational actual = r.acsch();
        Assertions.assertThat(actual).isCloseTo(expected, strictOffset(eps));
    }
}
